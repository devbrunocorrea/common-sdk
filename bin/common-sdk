#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/common-sdk
 * Created by Gilmar Pupo <g@g1mr.com>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * For more information, see <http://www.g1mr.com/>.
 */

namespace Gpupo\CommonSdk\Console;

require 'vendor/autoload.php';

use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;
use RegexIterator;
use Gpupo\CommonSdk\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;

$app = new Application("common-sdk");


$app->findConfig(['./']);

$opts = [
    ['key' => 'class'],
    ['key' => 'test-class'],
];

$app->appendCommand('tests:implement', 'Implement a test', $opts)
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $opts) {
        $list = $app->processInputParameters($opts, $input, $output);

        
});

$app->appendCommand('class:finder', 'Find classes')
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app) {

        $path = 'src/';
        $fqcns = [];

        $allFiles = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
        $phpFiles = new RegexIterator($allFiles, '/\.php$/');
        foreach ($phpFiles as $phpFile) {
            $content = file_get_contents($phpFile->getRealPath());
            $tokens = token_get_all($content);
            $namespace = '';
            for ($index = 0; isset($tokens[$index]); ++$index) {
                if (!isset($tokens[$index][0])) {
                    continue;
                }
                if (T_NAMESPACE === $tokens[$index][0]) {
                    $index += 2;
                    while (isset($tokens[$index]) && is_array($tokens[$index])) {
                        $namespace .= $tokens[$index++][1];
                    }
                }
                if (T_CLASS === $tokens[$index][0]) {
                    $index += 2;
                    $fqcns[] = $namespace.'\\'.$tokens[$index][1];
                }
            }
        }

        $tests = [];

        foreach ($fqcns as $item) {
            $output->writeln($item);

            $testCase = '\\'.str_replace('Gpupo\\', 'Gpupo\\Tests\\', $item).'Test';
            if (!class_exists($testCase) && false === strpos($item, 'Abstract') && false === strpos($item, 'Command')) {
                $tests[$item] = $testCase;
            }
        }

        $output->writeln("\nTests to implement\n");
        foreach ($tests as $t) {
            $output->writeln($t);
        }


        $output->writeln("\nRun:\n");
        foreach ($tests as $class => $test) {
            $output->writeln(__DIR__ .  '/common-sdk tests:implement --class="'.$class.'" --test-class="'.$test.'"');
        }
    });

$app->run();
